;; -*- lexical-binding: t -*-

;;; References
;; nix-buffer: https://github.com/NixOS/nixpkgs/blob/211fee9c4379714d861b3c875f642addbd25e920/pkgs/build-support/emacs/buffer.nix
;; exec-path-from-shell: https://github.com/purcell/exec-path-from-shell/blob/bf4bdc8b8911e7a2c04e624b9a343164c3878282/exec-path-from-shell.el
;; "my-guile-setup": https://stackoverflow.com/questions/16786831/how-can-i-set-environment-variables-to-a-buffer-local-scope-in-emacs/16789182#16789182

;;; Goals:
;; - #'nix-shell
;;   + run nix-shell and grab env
;;   + add shell into `nix-shell--shells` alist
;;     - indexed by command used to start the shell
;;       + so it can be looked up trivially by another invocation
;;     - contains:
;;       + shell "name" (autogenerated, but also prompted for)
;;       + relevant environment
;;       + list of buffers using said shell
;;   + make relevant variables buffer-local in current buffer
;;     - `process-environment` - entire environment
;;     - `exec-path` - $PATH
;;     - `eshell-path-env` - $PATH
;;     - `shell-file-name` - $SHELL
;;   + enable nix-shell-mode with lighter "nix-shell[<shell name>]"
;;   + apply environment to local buffer
;;
;; interactive #'nix-shell prompts you whether you want to input a
;;  - list of packages
;;  - filepath
;;  - existing shell
;; similar to #'magit-clone-regular prompting for url/path/local
;;
;; Possible to get the rcfile used by nix-shell by setting
;; `NIX_BUILD_SHELL` to a script that will return the first argument
;; (when calling nix-shell uninteractively, which we're doing). This
;; could be useful for eshell, shell, term, ansi-term, etc.
;;
;; Notes for rcfile usage:
;;  - `explicit-bash-args`
;;    + Used by `shell`
;;    + add `--rcfile <rcfile-path>`
;;  - `BASH_ENV`
;;    + Will affect `call-process-shell-command`
;;    + Set to rcfile path

(defconst nix-shell--get-rcfile-script
  (let ((dir (if load-file-name
		 (file-name-directory load-file-name)
	       default-directory)))
    (expand-file-name (concat dir "lib/get-rcfile.sh"))))

(defun nix-shell (shell-spec &optional use)
  (interactive (nix-shell--read-args))
  (error "Unimplemented."))

(defun nix-shell--read-args ()
  (error "Unimplemented."))

(defun nix-shell--get-rcfile (shell-spec)
  (string-trim
   (with-temp-buffer
     (call-process-shell-command
      (format "NIX_BUILD_SHELL='%s' nix-shell %s"
	      nix-shell--get-rcfile-script
	      (nix-shell--nix-shell-args shell-spec))
      nil t)
     (buffer-string))))

(defun nix-shell--nix-shell-args (shell-spec)
  (message "nix-shell--nix-shell-args: using prototyping definition")
  "-p hello")

